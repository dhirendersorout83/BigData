Create
======

/*
 * Creates a new HBase Table
*/


import java.io.IOException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.HColumnDescriptor;
import org.apache.hadoop.hbase.HTableDescriptor;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.Admin;
import org.apache.hadoop.hbase.client.Connection;
import org.apache.hadoop.hbase.client.ConnectionFactory;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;

public class CreateTable {

	public static void main(String[] args) throws IOException {

		// Setting logging level to Warnnings.
		Logger.getRootLogger().setLevel(Level.WARN);

		Configuration conf = HBaseConfiguration.create();
		System.out.println("Connecting to the server...");
		Connection con = ConnectionFactory.createConnection(conf);
		System.out.println("Connected");
		Admin admin = con.getAdmin();
		// Name of the HBase Table
		String table = "Employee";
		//get a table descriptor object
		HTableDescriptor htable = new HTableDescriptor(TableName.valueOf(table));
	    // add columns to the table
		htable.addFamily(new HColumnDescriptor("Personal"));
		htable.addFamily(new HColumnDescriptor("Contact"));
		htable.addFamily(new HColumnDescriptor("Employment"));

		System.out.println("Creating table named '" + table+"'");
		admin.createTable(htable);
		System.out.println("'"+table + "' table is created");

		// Closing the connection
		con.close();
		System.out.println("Exiting Program");

	}
}

Delete Table
============
/*
 * Takes Input from the user and deletes the table
*/


import java.io.IOException;
import java.util.Scanner;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.Admin;
import org.apache.hadoop.hbase.client.Connection;
import org.apache.hadoop.hbase.client.ConnectionFactory;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;

public class DeleteTable {

	public static String getTableName(Admin admin) throws IOException {

		// The list of all HBase tables
		TableName[] tableList = admin.listTableNames();
		System.out.println("Select a Table...");

		// If there are no HBase table present
		if (tableList.length == 0) {
			System.out.println("No HBase table present to delete");
			System.out.println("Exiting Program");
			System.exit(0);
		}

		int sel = 0;
		for (TableName val : tableList) {
			System.out.println("Enter " + sel++ + " for ----> " + val.getNameAsString());
		}

		Scanner sc = new Scanner(System.in);
		// get input from user
		int input = sc.nextInt();

		if (input < 0 || input > tableList.length - 1) {
			System.out.println("Invaild Input");
			System.out.println("Exiting Program");
			System.exit(0);
		}
		sc.close();
		return tableList[input].getNameAsString();
	}

	public static void main(String[] args) throws IOException {
		
		// setting log level to Warnning
		Logger.getRootLogger().setLevel(Level.WARN);

		Configuration conf = HBaseConfiguration.create();
		System.out.println("Connecting to the server...");
		Connection con = ConnectionFactory.createConnection(conf);
		Admin admin = con.getAdmin();
		System.out.println("Connected");

		String table = getTableName(admin);

		// Disable the table
		System.out.println("Disabling table '" + table+"'");
		admin.disableTable(TableName.valueOf(table));

		// drop/delete the table
		System.out.println("Deleting table '" + table+"'");
		admin.deleteTable(TableName.valueOf(table));

		System.out.println("'"+table + "' table is deleted");

		// closing the connection
		con.close();
		System.out.println("Exiting Program");

	}

}


Delete DAta
===========
/*
 * Deletes data from a table
*/



import java.io.IOException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.Admin;
import org.apache.hadoop.hbase.client.Connection;
import org.apache.hadoop.hbase.client.ConnectionFactory;
import org.apache.hadoop.hbase.client.Delete;
import org.apache.hadoop.hbase.client.Table;
import org.apache.hadoop.hbase.util.Bytes;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;

public class DeleteData {

	public static void main(String[] args) throws IOException {

		// Setting logging level to Warnning
		Logger.getRootLogger().setLevel(Level.WARN);

		Configuration conf = HBaseConfiguration.create();
		System.out.println("Connecting to the server...");
		Connection con = ConnectionFactory.createConnection(conf);
		System.out.println("Connected");
		Admin admin = con.getAdmin();

		//Name of the table
		String table = "Employee";

		// Check if table exists
		if (admin.tableExists(TableName.valueOf(table))) {
			
			// Get the Table object 
			Table htable = con.getTable(TableName.valueOf(table));
			
			// Deleting data related of a perticular row
			Delete deleteData = new Delete(Bytes.toBytes("row1"));    
				 	
			// to delete the latest version of the value < row1, ContactDetils:Mobile >
			deleteData.addColumn(Bytes.toBytes("Contact"), Bytes.toBytes("Mobile"));
			
/*		
 * 			// To delete a specific version of a value, we can specify the timestamp also
 *			deleteData.addColumn(byte[] columnFamily, byte[] columnQualifier, long timeStamp);
 * 			
 *			// To delete the entire column family of a perticular rowkey 
 *			deleteData.deleteFamily(byte[] columnFamily);
 *
 *			
*/		
			// Delete the data from the table
			htable.delete(deleteData);
			
/*			
 * 			// To delete the complete column family ( for all rows)
 * 			admin.deleteColumn(TableName, byte[] columnFamily);
*/
			System.out.println("Deleted the values");
			
		} else {
			System.out.println("The HBase Table named '" + table + "' doesn't exists.");
		}
		
		//Closing the connections
		con.close();
		System.out.println("Exiting Program");
	}

}

Put
==========

/*
 * Populates Data into a existing HBase table 
*/
import java.io.IOException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.Admin;
import org.apache.hadoop.hbase.client.Connection;
import org.apache.hadoop.hbase.client.ConnectionFactory;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.client.Table;
import org.apache.hadoop.hbase.util.Bytes;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;

public class PutData {

	public static void main(String[] args) throws IOException {

		//Setting logging level to Warnning
		Logger.getRootLogger().setLevel(Level.WARN);

		Configuration conf = HBaseConfiguration.create();
		System.out.println("Connecting to the server...");
		Connection con = ConnectionFactory.createConnection(conf);
		System.out.println("Connected");
		Admin admin = con.getAdmin();
		
		//Name of the table
		String table = "Employee";
		
		// Check if table exists
		if (admin.tableExists(TableName.valueOf(table))) {

			//Get a Table object
			Table htable = con.getTable(TableName.valueOf(table));
			

			/*********** adding a new row ***********/

			// Define row key
			Put p = new Put(Bytes.toBytes("row1"));

			// p.addColumn(byte[] ColumnFamily, byte[] CoulmnQualifier, long TimeStamp, byte[] value);

			p.addColumn(Bytes.toBytes("Contact"), Bytes.toBytes("Mobile"), Bytes.toBytes("9876543210"));
			p.addColumn(Bytes.toBytes("Contact"), Bytes.toBytes("Email"), Bytes.toBytes("abhc@gmail.com"));

			p.addColumn(Bytes.toBytes("Personal"), Bytes.toBytes("Name"), Bytes.toBytes("Abhinav Rawat"));
			p.addColumn(Bytes.toBytes("Personal"), Bytes.toBytes("Age"), Bytes.toBytes("21"));
			p.addColumn(Bytes.toBytes("Personal"), Bytes.toBytes("Gender"), Bytes.toBytes("M"));

			p.addColumn(Bytes.toBytes("Employment"), Bytes.toBytes("Company"), Bytes.toBytes("Google"));
			p.addColumn(Bytes.toBytes("Employment"), Bytes.toBytes("DOJ"), Bytes.toBytes("11:06:2018"));
			p.addColumn(Bytes.toBytes("Employment"), Bytes.toBytes("Designation"), Bytes.toBytes("Senior VP"));
			
			// add the row to the table
			htable.put(p);

			/**********************/

			p = new Put(Bytes.toBytes("row2"));

			p.addColumn(Bytes.toBytes("Contact"), Bytes.toBytes("Mobile"), Bytes.toBytes("1234567890"));
			p.addColumn(Bytes.toBytes("Contact"), Bytes.toBytes("Email"), Bytes.toBytes("abc@gmail.com"));

			p.addColumn(Bytes.toBytes("Personal"), Bytes.toBytes("Name"), Bytes.toBytes("Utkarsh Singh"));
			p.addColumn(Bytes.toBytes("Personal"), Bytes.toBytes("Age"), Bytes.toBytes("45"));
			p.addColumn(Bytes.toBytes("Personal"), Bytes.toBytes("Gender"), Bytes.toBytes("M"));

			p.addColumn(Bytes.toBytes("Employment"), Bytes.toBytes("Company"), Bytes.toBytes("Singh Computers Inc."));
			p.addColumn(Bytes.toBytes("Employment"), Bytes.toBytes("DOJ"), Bytes.toBytes("05:05:2009"));
			p.addColumn(Bytes.toBytes("Employment"), Bytes.toBytes("Designation"), Bytes.toBytes("Founder"));

			htable.put(p);

			/**********************/

			p = new Put(Bytes.toBytes("row3"));

			p.addColumn(Bytes.toBytes("Contact"), Bytes.toBytes("Mobile"), Bytes.toBytes("9988776600"));
			p.addColumn(Bytes.toBytes("Contact"), Bytes.toBytes("Email"), Bytes.toBytes("xyz@gmail.com"));

			p.addColumn(Bytes.toBytes("Personal"), Bytes.toBytes("Name"), Bytes.toBytes("Steve Rogers"));
			p.addColumn(Bytes.toBytes("Personal"), Bytes.toBytes("Age"), Bytes.toBytes("90"));
			p.addColumn(Bytes.toBytes("Personal"), Bytes.toBytes("Gender"), Bytes.toBytes('M'));

			p.addColumn(Bytes.toBytes("Employment"), Bytes.toBytes("Company"), Bytes.toBytes("Avengers"));
			p.addColumn(Bytes.toBytes("Employment"), Bytes.toBytes("DOJ"), Bytes.toBytes("05:05:2011"));
			p.addColumn(Bytes.toBytes("Employment"), Bytes.toBytes("Designation"), Bytes.toBytes("Captain"));

			htable.put(p);

			/**********************/

			System.out.println("Table '" + table + "' is Populated");

		} else {

			System.out.println("The HBase Table named '" + table + "' doesn't exists.");
		}
		
		//Closing the connection
		con.close();
		System.out.println("Exiting Program");

	}

}


Get
======
/*
 * Prints data of the table 
*/

import java.io.IOException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.Admin;
import org.apache.hadoop.hbase.client.Connection;
import org.apache.hadoop.hbase.client.ConnectionFactory;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.ResultScanner;
import org.apache.hadoop.hbase.client.Scan;
import org.apache.hadoop.hbase.client.Table;
import org.apache.hadoop.hbase.util.Bytes;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;

public class GetData {

	public static void main(String[] args) throws IOException {

		// Setting logging level to Warnning
		Logger.getRootLogger().setLevel(Level.WARN);
		
		Configuration conf = HBaseConfiguration.create();
		System.out.println("Connecting to the server...");
		Connection con = ConnectionFactory.createConnection(conf);
		System.out.println("Connected");
		Admin admin = con.getAdmin();

		//Name of the table
		String table = "Employee";

		// Check if table exists
		if (admin.tableExists(TableName.valueOf(table))) {

			// get a Table object for the table
			Table htable = con.getTable(TableName.valueOf(table));
			
			//Creating a Scan object to read complete table
			Scan scan = new Scan();
			
			 
/*			
 * 			//To limit number rows to be scanned
 * 			Scan scan = new Scan(byte[] startRow)
 * 			Scan scan = new Scan(byte[] startRow, byte[] stopRow)
 * 			
 * 			// in case of big Tables
 * 				// set number of rows to cache before returning the result
 * 				scan.setCaching(int caching)
 *				
 *				//To limit the number of columns(for wind tables)
 *				scan.setBatch(int batch)	
*/
				
			ResultScanner scanner = htable.getScanner(scan);
			
			System.out.println();
			
			for (Result res : scanner) {
				
				// prints data from 'Personal' column family
					System.out.println(Bytes.toString(res.getRow()) + " "
							+ Bytes.toString(res.getValue(Bytes.toBytes("Personal"), Bytes.toBytes("Name"))) + " "
						+ Bytes.toString(res.getValue(Bytes.toBytes("Personal"), Bytes.toBytes("Age"))) + " "
						+ Bytes.toString(res.getValue(Bytes.toBytes("Personal"), Bytes.toBytes("Gender"))));
				
				// prints data from 'Contact' column family
				System.out.println(Bytes.toString(res.getRow()) + " "
						+ Bytes.toString(res.getValue(Bytes.toBytes("Contact"), Bytes.toBytes("Mobile"))) + " "
						+ Bytes.toString(res.getValue(Bytes.toBytes("Contact"), Bytes.toBytes("Email"))));
				
				// prints data from 'Employment' column family
				System.out.println( Bytes.toString(res.getRow()) + " "
						+ Bytes.toString(res.getValue(Bytes.toBytes("Employment"), Bytes.toBytes("Company"))) + " "
						+ Bytes.toString(res.getValue(Bytes.toBytes("Employment"), Bytes.toBytes("DOJ"))) + " "
						+ Bytes.toString(res.getValue(Bytes.toBytes("Employment"), Bytes.toBytes("Designation"))));	
				
				System.out.println();
			}

		} else {

			System.out.println("The HBase Table named '" + table + "' doesn't exists.");
		}
		
		// Closing the connection
		con.close();
		System.out.println("Exiting Program");

	}

}



List Tables
===========
/*
 * Lists all the HBase tables
*/

import java.io.IOException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.Admin;
import org.apache.hadoop.hbase.client.Connection;
import org.apache.hadoop.hbase.client.ConnectionFactory;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;

public class ListTables {
	
	public static void main(String[] args) throws IOException {
		
		//Setting logging level to Warning
		Logger.getRootLogger().setLevel(Level.WARN);
		
		Configuration conf = HBaseConfiguration.create();
		System.out.println("Connecting to the server...");
		Connection con = ConnectionFactory.createConnection(conf);
		System.out.println("Connected");
		Admin admin = con.getAdmin();
		
		
		// get the list of all HBase tables 
		TableName[] tableList = admin.listTableNames();
		
		// if no HBase table is present 
		if(tableList.length==0) {
			System.out.println("No HBase table present");
			System.out.println("Exiting Program");
			System.exit(0);
		}
		
		System.out.println("List of HBase tables...");
		// Print names of all HBase tables 
		for (TableName val : tableList) {
			System.out.println(val.getNameAsString());
			
		}
		
		//Closing the Connection
		con.close();
		System.out.println("Exiting Program");

	}

}
