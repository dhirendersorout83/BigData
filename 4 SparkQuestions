Q. What is difference between reduce and reduceByKey
=====================================================
Ans. 
Reduce :
is for aggregation of built-in datatypes for sum,multi which is commutative and associative 
Can not apply on complex data structure
reduce must pull the entire dataset down into a single location because it is reducing to one final value.

ReduceByKey: works on key and value. 
can apply on complex data structure
is one value for each key. And since this action can be run on each machine locally first then it can remain an RDD and have further transformations done on its dataset.
Merge the values for each key using an associative and commutative reduce function



Q. Converting a Spark Dataframe to a Scala Map collection
=====================================================
https://stackoverflow.com/questions/36895396/converting-a-spark-dataframe-to-a-scala-map-collection/36896210#36896210
https://sparkbyexamples.com/spark/spark-sql-map-functions/
https://sparkbyexamples.com/spark/using-lit-and-typedlit-to-add-a-literal-or-constant-to-spark-dataframe/


Q. How to control driver and executor variable
=====================================================================


Q. What is difference between Coalesce and repartition?
==============================================================
https://medium.com/@mrpowers/managing-spark-partitions-with-coalesce-and-repartition-4050c57ad5c4

coalesce
-----------
The coalesce algorithm moved the data from Partition B to Partition A and moved the data from Partition D to Partition C. The data in Partition A and Partition C does not move with the coalesce algorithm. This algorithm is fast in certain situations because it minimizes data movement.

You can try to increase the number of partitions with coalesce, but it wonâ€™t work!
val numbersDf3 = numbersDf.coalesce(6)
numbersDf3.rdd.partitions.size // => 4

repartition
--------------
The repartition method can be used to either increase or decrease the number of partitions in a DataFrame.
Partition ABC contains data from Partition A, Partition B, Partition C, and Partition D. Partition XYZ also contains data from each original partition. The repartition algorithm does a full data shuffle and equally distributes the data among the partitions. It does not attempt to minimize data movement like the coalesce algorithm.

The repartition method can be used to increase the number of partitions as well.
val bartDf = numbersDf.repartition(6)
bartDf.rdd.partitions.size // => 6

